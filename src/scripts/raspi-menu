#!/bin/bash

# Message box
whiptail --title "Example Dialog" --msgbox "This is an example of a message box. You must hit OK to continue." 8 78


# Yes/no box
if (whiptail --title "Example Dialog" --yesno "This is an example of a yes/no box." 8 78); then
    echo "User selected Yes, exit status was $?."
else
    echo "User selected No, exit status was $?."
fi


# Input box
COLOR=$(whiptail --inputbox "What is your favorite Color?" 8 40 Blue --title "Example Dialog" 3>&1 1>&2 2>&3)
# A trick to swap stdout and stderr.
# Again, you can pack this inside if, but it seems really long for some 80-col terminal users.
exitstatus=$?
if [ $exitstatus = 0 ]; then
    echo "User selected Ok and entered " $COLOR
else
    echo "User selected Cancel."
fi

echo "(Exit status was $exitstatus)"


# Password box
PASSWORD=$(whiptail --passwordbox "please enter your secret password" 8 40 --title "password dialog" 3>&1 1>&2 2>&3)
# A trick to swap stdout and stderr.
# Again, you can pack this inside if, but it seems really long for some 80-col terminal users.
exitstatus=$?
if [ $exitstatus = 0 ]; then
    echo "User selected Ok and entered " $PASSWORD
else
    echo "User selected Cancel."
fi

echo "(Exit status was $exitstatus)"


# Menu box
whiptail --title "Menu example" --menu "Choose an option" 25 78 16 \
"<-- Back" "Return to the main menu." \
"Add User" "Add a user to the system." \
"Modify User" "Modify an existing user." \
"List Users" "List all users on the system." \
"Add Group" "Add a user group to the system." \
"Modify Group" "Modify a group and its list of members." \
"List Groups" "List all groups on the system."


# Check list
whiptail --title "Check list example" --checklist \
"Choose user's permissions" 20 78 4 \
"NET_OUTBOUND" "Allow connections to other hosts" ON \
"NET_INBOUND" "Allow connections from other hosts" OFF \
"LOCAL_MOUNT" "Allow mounting of local devices" OFF \
"REMOTE_MOUNT" "Allow mounting of remote devices" OFF


# Radio list
whiptail --title "Radio list example" --radiolist \
"Choose user's permissions" 20 78 4 \
"NET_OUTBOUND" "Allow connections to other hosts" ON \
"NET_INBOUND" "Allow connections from other hosts" OFF \
"LOCAL_MOUNT" "Allow mounting of local devices" OFF \
"REMOTE_MOUNT" "Allow mounting of remote devices" OFF


# Progress gauge
# 1
{
	for i in {1..100}; do
		sleep 0.1
		read -t 0.1 -N 1 input
		if [[ $input == 'q' ]] || [[ $input == "Q" ]];then
			break;
		fi
		echo $i
	done
} | whiptail --gauge "Please wait while sleeping... Press 'q' to quit" 6 60 0

# 2
{
	sleep 0.5
	echo -e "XXX\n0\nyum remove package_0... \nXXX"
	sleep 1
	echo -e "XXX\n25\nyum remove package_0... Done.\nXXX"
	sleep 0.5
	echo -e "XXX\n25\nyum remove package_1... \nXXX"
	sleep 1
	echo -e "XXX\n50\nyum remove package_1... Done.\nXXX"
	sleep 0.5
	echo -e "XXX\n50\nyum remove package_2... \nXXX"
	sleep 1
	echo -e "XXX\n75\nyum remove package_2... Done.\nXXX"
	sleep 0.5
	echo -e "XXX\n75\nyum remove package_3... \nXXX"
	sleep 1
	echo -e "XXX\n100\nyum remove package_3... Done.\nXXX"
	sleep 1
} | whiptail --title "Yum Removal" --gauge "Please wait while installing" 6 60 0

# 3
msgs=("Preparing install..."
      "Starting update..."
     )
commands=("sudo apt-get update -y"
          "sudo apt-get upgrade -y"
         )

n=${#commands[@]}
i=0
while [ "$i" -lt "$n" ]; do
    pct=$(( i * 100 / n ))
    echo XXX
    echo $i
    echo "${msgs[i]}"
    echo XXX
    echo "$pct"
    eval "${commands[i]}"
    i=$((i + 1))
done | sudo whiptail --title "Gauge" --gauge "Please wait..." 6 60 0
